@page "/patients/edit"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using PatientDatabaseWebApp.DataModels
@using PatientDatabaseWebApp.Data
@inject IDbContextFactory<PatientDatabaseWebAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Patient</PageTitle>

<h3>Edit Patient</h3>

@if (Patient != null)
{
    <EditForm Model="Patient" OnValidSubmit="UpdatePatient">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="Patient.Name" />
        </div>
        <div class="form-group">
            <label for="dateOfBirth">Date of Birth</label>
            <InputDate id="dateOfBirth" class="form-control" @bind-Value="Patient.DateOfBirth" />
        </div>
        <div class="form-group">
            <label for="conditions">Conditions</label>
            <InputText id="conditions" class="form-control" @bind-Value="conditionsInput" />
            <button type="button" @onclick="AddCondition">Add Condition</button>
            <ul>
                @if (Patient.Conditions != null)
                {
                    @foreach (var condition in Patient.Conditions)
                    {
                        <li>@condition <button type="button" @onclick="() => RemoveCondition(condition)">Remove</button></li>
                    }
                }
                else
                {
                    <li>No conditions</li>
                }
            </ul>
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}
else
{
    <p><em>Loading...</em></p>
}

<div>
    <a href="/patients">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    private Patient? Patient { get; set; }

    private string conditionsInput = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Patient = await context.Patient.FirstOrDefaultAsync(m => m.Id == Id);

        if (Patient is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else if (Patient.Conditions == null)
        {
            Patient.Conditions = new List<string>();
        }
    }

    private void AddCondition()
    {
        if (!string.IsNullOrWhiteSpace(conditionsInput))
        {
            Patient?.Conditions.Add(conditionsInput);
            conditionsInput = string.Empty;
        }
    }

    private void RemoveCondition(string condition)
    {
        Patient?.Conditions.Remove(condition);
    }

    private async Task UpdatePatient()
    {
        using var context = DbFactory.CreateDbContext();
        Patient!.FindAge(); // Update the age based on the date of birth
        context.Attach(Patient).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PatientExists(Patient.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/patients");
    }

    private bool PatientExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Patient.Any(e => e.Id == id);
    }
}
