@page "/patients"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using PatientDatabaseWebApp.DataModels
@using PatientDatabaseWebApp.Data
@implements IAsyncDisposable
@inject IDbContextFactory<PatientDatabaseWebApp.Data.PatientDatabaseWebAppContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Patients</h1>
<div>
    <form action="/patients" data-enhance data-permanent>
        <input type="search" name="nameFilter" />
        <input type="submit" value="Search" />
    </form>
</div>
<p>
    <a href="patients/create">Add New Patient</a>
</p>

<QuickGrid Class="table" Items="FilteredPatients">
    <PropertyColumn Property="patient => patient.Id" />
    <PropertyColumn Property="patient => patient.Name" />
    <PropertyColumn Property="patient => patient.DateOfBirth" Title="Date of Birth"/>
    <PropertyColumn Property="patient => patient.Age" />
    <PropertyColumn Property="patient => patient.Conditions" />

    <TemplateColumn Context="patient">
        <a href="@($"patients/edit?id={patient.Id}")">Edit</a> |
        <a href="@($"patients/details?id={patient.Id}")">Details</a> |
        <a href="@($"patients/delete?id={patient.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private PatientDatabaseWebAppContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    [SupplyParameterFromQuery]
    private string? NameFilter { get; set; }

    private IQueryable<Patient> FilteredPatients =>
        int.TryParse(NameFilter, out int id)
            ? context.Patient.Where(m => m.Id == id)
            : context.Patient.Where(m => m.Name!.Contains(NameFilter ?? string.Empty));
}
