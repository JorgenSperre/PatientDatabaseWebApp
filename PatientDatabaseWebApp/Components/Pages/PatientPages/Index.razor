@page "/patients"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using PatientDatabaseWebApp.DataModels
@using PatientDatabaseWebApp.Data
@implements IAsyncDisposable
@inject IDbContextFactory<PatientDatabaseWebApp.Data.PatientDatabaseWebAppContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Patients</h1>
<div>
    <input type="search" @bind="searchFilter" @bind:event="oninput" />
</div>
<p>
    <a href="patients/create">Add New Patient</a>
</p>

<QuickGrid Class="table" Items="FilteredPatients" Pagination="pagination">
    <PropertyColumn Property="patient => patient.Id" Sortable="true" />
    <PropertyColumn Property="patient => patient.Name" Sortable="true" />
    <PropertyColumn Property="patient => patient.DateOfBirth" Title="Date of Birth" Sortable="true" />
    <PropertyColumn Property="patient => patient.Age" Sortable="true" />
    <PropertyColumn Property="patient => patient.Conditions" Sortable="true" />

    <TemplateColumn Context="patient">
        <a href="@($"patients/edit?id={patient.Id}")">Edit</a> |
        <a href="@($"patients/details?id={patient.Id}")">Details</a> |
        <a href="@($"patients/delete?id={patient.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<Paginator State="pagination" />

@code {
    private PatientDatabaseWebAppContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    private string searchFilter = string.Empty;

    private IQueryable<Patient> FilteredPatients =>
        context.Patient.Where(m => m.Name!.Contains(searchFilter) || m.Id.ToString().Contains(searchFilter));

    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
}
