@page "/patients/delete"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using PatientDatabaseWebApp.DataModels
@inject IDbContextFactory<PatientDatabaseWebApp.Data.PatientDatabaseWebAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Patient</h2>
    <hr />
    @if (patient is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <a href="@($"patients/details?id={patient.Id}")">Details</a>
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@patient.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Date Of Birth</dt>
            <dd class="col-sm-10">@patient.DateOfBirth</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Age</dt>
            <dd class="col-sm-10">@patient.Age</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Conditions</dt>
            <dd class="col-sm-10">
                <ul>
                    @if (patient.Conditions != null)
                    {
                        @foreach (var condition in patient.Conditions)
                        {
                            <li>@condition</li>
                        }
                    }
                    else
                    {
                        <li>No conditions</li>
                    }
                </ul>
            </dd>
        </dl>
        <EditForm method="post" Model="patient" OnValidSubmit="DeletePatient" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(patient is null)">Delete</button> |
            <a href="/patients">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Patient? patient;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        patient = await context.Patient.FirstOrDefaultAsync(m => m.Id == Id);

        if (patient is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeletePatient()
    {
        using var context = DbFactory.CreateDbContext();
        context.Patient.Remove(patient!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/patients");
    }
}
