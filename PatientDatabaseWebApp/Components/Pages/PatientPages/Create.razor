@page "/patients/create"
@using Microsoft.EntityFrameworkCore
@using PatientDatabaseWebApp.DataModels
@inject IDbContextFactory<PatientDatabaseWebApp.Data.PatientDatabaseWebAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Patient</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Patient" OnValidSubmit="AddPatient" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Patient.Name" class="form-control" />
                <ValidationMessage For="() => Patient.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="dateofbirth" class="form-label">Date Of Birth:</label>
                <InputDate id="dateofbirth" @bind-Value="Patient.DateOfBirth" class="form-control" />
                <ValidationMessage For="() => Patient.DateOfBirth" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="conditions" class="form-label">Conditions:</label>
                <InputText id="conditions" @bind-Value="conditionsInput" class="form-control" />
                <button type="button" @onclick="AddCondition" class="btn btn-secondary">Add Condition</button>
                <ul>
                    @if (Patient.Conditions != null)
                    {
                        @foreach (var condition in Patient.Conditions)
                        {
                            <li>@condition <button type="button" @onclick="() => RemoveCondition(condition)" class="btn btn-danger btn-sm">Remove</button></li>
                        }
                    }
                    else
                    {
                        <li>No conditions</li>
                    }
                </ul>
                <ValidationMessage For="() => Patient.Conditions" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/patients">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Patient Patient { get; set; } = new();

    private string conditionsInput = string.Empty;

    private void AddCondition()
    {
        if (!string.IsNullOrWhiteSpace(conditionsInput))
        {
            Patient.Conditions ??= new List<string>();
            Patient.Conditions.Add(conditionsInput);
            conditionsInput = string.Empty;
        }
    }

    private void RemoveCondition(string condition)
    {
        Patient.Conditions?.Remove(condition);
    }

    private async Task AddPatient()
    {
        Patient.FindAge();
        using var context = DbFactory.CreateDbContext();
        context.Patient.Add(Patient);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/patients");
    }
}
